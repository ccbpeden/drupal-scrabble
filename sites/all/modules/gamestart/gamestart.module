<?php
  //Page menu links that hook into menu
    function gamestart_menu() {
        $items['start_game'] = array(
            'title' => 'Scrabble Game Start',
            'page callback' => 'initialize',
            'access callback' => TRUE,
            'type' => MENU_NORMAL_ITEM,
        );
        $items['game_menu'] = array(
            'title' => 'Scrabble Play Menu',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('play_menu_form'),
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        $items['start_play_page'] = array(
            'title' => 'Current Turn Menu',
            'page callback' => 'start_turn',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        $items['turn_options'] = array(
            'title' => "Current Player's Options",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('turn_options_cb'),
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        $items['confirm_play'] = array(
            'title' => 'Confirm This Placement',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('play_confirm_form'),
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        $items['invalid_play'] = array(
          'title' => 'Invalid Play',
          'page callback' => 'invalid_play_function',
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items['place_tiles'] = array(
          'title' => "Place Tiles on Board",
          'page callback' => 'drupal_get_form',
          'page arguments' => array('check_place_tiles'),
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items['claim_word'] = array(
          'title' => "Claim a Word",
          'page callback' => 'drupal_get_form',
          'page arguments' => array('claim_word_form'),
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items['select_claimed_word'] = array(
          'title' => "Claim a Word",
          'page callback' => 'drupal_get_form',
          'page arguments' => array('select_claimed_word_form'),
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
        );
        return $items;
    }
    //Game initialization function that runs on "game start" to reset board, players, and play tiles
    function initialize() {
      //Hides player 1 and 2 tiles views
      $current_view = views_get_view('playable_tiles_view');
      $current_view->display['player1_tiles']->display_options['enabled'] = FALSE;
      views_save_view($current_view);
      $current_view = views_get_view('player2_tiles_view');
      $current_view->display['player2_tiles']->display_options['enabled'] = FALSE;
      views_save_view($current_view);
        //clears session data
        $_SESSION['current_player'] = null;
        $_SESSION['tile_to_play'] = null;
        $_SESSION['location_to_play'] = null;
        $_SESSION['game_in_play'] = false;
        $_SESSION['first_tile_played'] = false;
        $_SESSION['claim_word_active'] = false;
        //Queries all board tiles and clears current image and played letters
        $query_board = db_select('node', 'n')
            ->Fields('N', array('nid', 'title'))
            ->condition('type', 'board');
        $result = $query_board->execute();
        foreach($result as $record) {
            $node = node_load($record->nid);
            $node->field_played_letter[$node->language][0]['value'] = '';
            $node->field_current_image = $node->field_default_image;
            $node->revision = 1;
            $node->log = 'This node was programmatically updated on ' . date('c');
            node_save($node);
        }
        //Queries all play tiles and clears the x, y coordinates and 'belongs to'
        $query_play_tiles = db_select('node', 'n')
            ->Fields('N', array('nid', 'title'))
            ->condition('type', 'board_tile');
        $result = $query_play_tiles->execute();
        foreach($result as $play_tile) {
            $node = node_load($play_tile->nid);
            $node->field_belongs_to[$node->language][0]['value'] = 'none';
            $node->field_x_coordinate[$node->language][0]['value'] = '';
            $node->field_y_coordinate[$node->language][0]['value'] = null;
            node_save($node);
        }
        //Queries all played words and deletes all
        $query_words = db_select('node', 'n')
        ->Fields('N', array('nid', 'title'))
        ->condition('type', 'played_words');
        $result = $query_words->execute();
        foreach($result as $word) {
            $node = node_load($word->nid);
            node_delete($node->nid);
        }
        //Queries all players and clears all tiles and resets score to 0
        $query_players = db_select('node', 'n')
        ->Fields('N', array('nid', 'title'))
        ->condition('type', 'player');
        $result = $query_players->execute();
        foreach($result as $player) {
            $node = node_load($player->nid);
            $node->field_score[$node->language][0]['value'] = 0;
            $node->revision = 1;
            $node->log = 'This node was programmatically updated on ' . date('c');
            node_save($node);
        }
        //Randomly draws 14 tiles and assigns them to players 1 and 2
        $inplaytiles = [];
        $inplaynumbers = get_randoms(14);
        $player1_tiles = [];
        $player2_tiles = [];
        $all_letters = [];

        $query_beginning_player_tiles = db_select('node', 'n')
        ->Fields('N', array('nid'))
        ->condition('type', 'board_tile');
        $result = $query_beginning_player_tiles->execute();
        foreach($result as $entry) {
            $node = node_load($entry->nid);
            array_push($all_letters, $node);
        }

        for($q = 0; $q < count($inplaynumbers); $q++){
            $current_random = $inplaynumbers[$q];
            array_push($inplaytiles, $all_letters[$current_random]);
        }

        for($s = 0; $s < count($inplaytiles); $s++){
            if ($s%2 === 0){
                array_push($player1_tiles, $inplaytiles[$s]);
            } else {
                array_push($player2_tiles, $inplaytiles[$s]);
            }
        }

        for($i = 0; $i < count($player1_tiles); $i++){
            $nid = $player1_tiles[$i]->nid;
            $node = node_load($nid);
            $node->field_belongs_to['und'][0]['value'] = 'Player 1';
            node_save($node);

        }
        $player1_nid = 2917;
        $player_node = node_load($player1_nid);
        $player_node->field_tile1[$node->language][0]['value'] = $player1_tiles[0]->nid;
        $player_node->field_tile2[$node->language][0]['value'] = $player1_tiles[1]->nid;
        $player_node->field_tile3[$node->language][0]['value'] = $player1_tiles[2]->nid;
        $player_node->field_tile4[$node->language][0]['value'] = $player1_tiles[3]->nid;
        $player_node->field_tile5[$node->language][0]['value'] = $player1_tiles[4]->nid;
        $player_node->field_tile6[$node->language][0]['value'] = $player1_tiles[5]->nid;
        $player_node->field_tile7[$node->language][0]['value'] = $player1_tiles[6]->nid;
        node_save($player_node);


        for($j = 0; $j < count($player2_tiles); $j++){
            $nid = $player2_tiles[$j]->nid;
            $node = node_load($nid);
            $node->field_belongs_to['und'][0]['value'] = 'Player 2';
            node_save($node);
        }

        $player2_nid = 2918;
        $player_node = node_load($player2_nid);
        $player_node->field_tile1[$node->language][0]['value'] = $player2_tiles[0]->nid;
        $player_node->field_tile2[$node->language][0]['value'] = $player2_tiles[1]->nid;
        $player_node->field_tile3[$node->language][0]['value'] = $player2_tiles[2]->nid;
        $player_node->field_tile4[$node->language][0]['value'] = $player2_tiles[3]->nid;
        $player_node->field_tile5[$node->language][0]['value'] = $player2_tiles[4]->nid;
        $player_node->field_tile6[$node->language][0]['value'] = $player2_tiles[5]->nid;
        $player_node->field_tile7[$node->language][0]['value'] = $player2_tiles[6]->nid;
        node_save($player_node);

        drupal_goto('game_menu');
    }
    //Creates or adds to an array of randomly generated numbers
    function get_randoms($amount) {
        if(array_key_exists('inplaynumbers', $_SESSION)){
          $inplaynumbers = $_SESSION['inplaynumbers'];
        } else {
          $inplaynumbers = [];
        }
        $desirednumbers = [];
        for($i = 1; $i <=99; $i++){
            if (count($desirednumbers) < $amount) {
                $random = rand(0 , 99);
                if (!in_array($random, $inplaynumbers)) {
                    array_push($desirednumbers, $random);
                    array_push($inplaynumbers, $random);
                }
            } else {
                $_SESSION['inplaynumbers'] = $inplaynumbers;
                return $desirednumbers;
            }
        }
    }

    //Starts a player's turn with a form displaying start button
    function play_menu_form(){

        if(!isset($_SESSION['current_player'])){
            $_SESSION['current_player'] = node_load(2917);
        }

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => $_SESSION['current_player']->title . " start turn",
        );
        return $form;
    }

    function play_menu_form_submit($form, &$form_state) {
        $form_state['redirect'] = 'start_play_page';
    }

    //Offers player a form with options of actions to perform on their turn
    function turn_options_cb() {
      $form['play_tiles'] = array(
        '#title' => 'Place some tiles on the board',
        '#type' => 'item',
      );
      $form['play_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Play Tiles',
        '#submit' => array('play_submit'),
      );
      $form['redraw_tiles'] = array(
        '#title' => 'Redraw Tiles',
        '#type' => 'item',
      );
      $form['redraw_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Redraw Tiles',
        '#submit' => array('redraw_tiles_submit'),
      );
      $form['end_turn'] = array(
        '#title' => 'End Your Turn',
        '#type' => 'item',
      );
      $form['endturn_submit'] = array(
        '#type' => 'submit',
        '#value' => 'End Turn',
        '#submit' => array('end_turn_submit'),
      );
        return $form;
    }

    function play_submit(&$form, &$form_state) {
      drupal_goto('place_tiles');
    }

    function redraw_tiles_submit(&$form, &$form_state) {

    }

    //Ends player turn by refilling hand with tiles and switching to the next player and player tiles view
    function end_turn_submit(&$form, &$form_state) {
          $query_all_play_tiles = db_select('node', 'n')
          ->Fields('N', array('nid'))
          ->condition('type', 'board_tile');
          $returned_play_tiles = $query_all_play_tiles->execute();
          $empty_tile_slot_count = 0;
          for ($i = 1; $i <= 7; $i++) {
           $field_name = 'field_tile' . $i;
           if ($_SESSION['current_player']->$field_name['und'][0]['value'] == '') {
               $empty_tile_slot_count++;
           }
           $returned_randoms = get_randoms($empty_tile_slot_count);
           for ($i = 1; $i <= 7; $i++) {
            $field_name = 'field_tile' . $i;
            if ($_SESSION['current_player']->$field_name['und'][0]['value'] == '') {
              for ($j = 0; $j < count($returned_randoms); $j++) {
                $_SESSION['current_player']->$field_name['und'][0]['value'] = $returned_play_tiles[$returned_randoms[$j]]->nid;
                $tile_to_save = node_load($returned_play_tiles[$returned_randoms[$j]]->nid);
                $tile_to_save->field_belongs_to['und'][0]['value'] = $_SESSION['current_player']->title;
                node_save($tile_to_save);
              }
            }
            node_save($_SESSION['current_player']);
          }
          $player1 = 'playable_tiles_view';
          $player2 = 'player2_tiles_view';
          $current_view = views_get_view($player1);
          $current_view->display['player1_tiles']->display_options['enabled'] = FALSE;
          views_save_view($current_view);
          $p2_view = views_get_view($player2);
          $p2_view->display['player2_tiles']->display_options['enabled'] = FALSE;
          views_save_view($p2_view);
          if ($_SESSION['current_player']->nid == 2918) {

            $_SESSION['current_player'] = node_load(2917);
          } else {
            $_SESSION['current_player'] = node_load(2918);
          }
          $_SESSION['game_in_play'] = FALSE;
          $_SESSION['first_tile_played'] = false;
          $_SESSION['claim_word_active'] = false;
          drupal_goto('game_menu');
        }
    }

    //Displays menu form to allow player to end turn or claim a word once they have placed tiles on the board
    function check_place_tiles() {
      $form['desc'] = array(
        '#title' => 'Place some tiles on the board and when you are ready, claim your word! If you are not wanting to save your placed tiles, hit "end turn".',
        '#type' => 'item',
      );
      $form['claim_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Claim Your Word',
        '#submit' => array('claim_submit'),
      );
      if (!$_SESSION['first_tile_played']) {
        $form['desc2'] = array(
          '#title' => 'End your turn without playing any tiles',
          '#type' => 'item',
        );
        $form['play_submit'] = array(
          '#type' => 'submit',
          '#value' => 'End Turn',
          '#submit' => array('end_turn_submit'),
        );
      }
      return $form;
    }

    function claim_submit(&$form, &$form_state) {
      drupal_goto('claim_word');
    }

    function claim_word_form() {
      $_SESSION['claim_word_active'] = true;
      $form['desc'] = array(
        '#title' => 'Click on the first letter you wish to claim',
        '#type' => 'item',
      );

      return $form;
    }

    function claim_word_form_submit(&$form, &$form_state) {
      drupal_goto('start_play_page');
    }

    //Checks that a player wants to place a tile at a particular location, using a form with yes or no options
    function play_confirm_form(){

        if(isset($_SESSION['current_player'])  && $_SESSION['tile_to_play_title'] && $_SESSION['location_to_play_title']){
          $form['desc'] = array(
              '#type' => 'item',
              '#title' => 'Do you want to play '.$_SESSION['tile_to_play_title'].' at location '.$_SESSION['location_to_play_title'],
          );
        $form['submit_cancel'] = array(
          '#type' => 'submit',
          '#value' => 'no',
          '#submit' => array('play_confirm_form_cancel_submit'),
        );
        $form['submit_accept'] = array(
          '#type' => 'submit',
          '#value' => 'yes',
          '#submit' => array('play_confirm_form_accept_submit'),
        );
        return $form;
      }
    }

    function play_confirm_form_cancel_submit(&$form, &$form_state){
        $_SESSION['tile_to_play'] = NULL;
        $_SESSION['location_to_play'] = NULL;
        drupal_goto('turn_options');
    }

    function play_confirm_form_accept_submit(&$form, &$form_state){
      if($_SESSION['location_to_play']->field_played_letter['und'][0]['value'] === ''){
          $_SESSION['location_to_play']->field_current_image = $_SESSION['tile_to_play']->field_letter_image;
          $_SESSION['location_to_play']->field_played_letter['und'][0]['value'] = $_SESSION['tile_to_play']->title;
          node_save($_SESSION['location_to_play']);
          $_SESSION['tile_to_play']->field_x_coordinate = $_SESSION['location_to_play']->field_board_x_coordinate;
          $_SESSION['tile_to_play']->field_y_coordinate = $_SESSION['location_to_play']->field_board_y_coordinate;
          $_SESSION['tile_to_play']->field_belongs_to['und'][0]['value'] = 'played';
          node_save($_SESSION['tile_to_play']);
          for ($i = 1; $i <= 7; $i++) {
           $field_name = 'field_tile' . $i;
           if ($_SESSION['current_player']->$field_name['und'][0]['value'] == $_SESSION['tile_to_play']->nid) {
               $_SESSION['current_player']->$field_name['und'][0]['value'] = null;
               node_save($_SESSION['current_player']);
               break;
           }
           $_SESSION['first_tile_played'] = true;
           drupal_goto('place_tiles');
       }

      } else {
        drupal_goto('invalid_play');
      }
    }

    //Function to check letters contained in possible claimed word
    function select_claimed_word_form(){
        $horizontal_poss = array();
        $vertical_poss = array();
        $locationx = $_SESSION['location_to_play']->field_board_x_coordinate['und'][0]['value'];
        $locationy = $_SESSION['location_to_play']->field_board_y_coordinate['und'][0]['value'];
        foreach(range($locationx, 'O') as $i){
          $query_word = new EntityFieldQuery();
          $query_word->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'board')
          ->propertyCondition('status', NODE_PUBLISHED)
          ->FieldCondition('field_board_x_coordinate', 'value', $i, '=')
          ->FieldCondition('field_board_y_coordinate', 'value', $locationy, '=');
          $result = $query_word->execute();
            $location_nid = array_keys($result['node']);
            $lettertitle = entity_load('node', $location_nid);
            foreach($lettertitle as $letter) {
              if($letter->field_played_letter['und'][0]['value'] != ''){
                array_push($horizontal_poss, $letter->field_played_letter['und'][0]['value']);
              } else {
              }
            }

        }
        print_r($horizontal_poss);
    }

    function select_claimed_word_form_submit(&$form, &$form_state){
        return;
    }

    //Switch tiles view depending on which player is playing, starts individual player's turn by clearing the 'first tile played'
    function start_turn() {
        $player1 = 'playable_tiles_view';
        $player2 = 'player2_tiles_view';
        if ($_SESSION['current_player']->nid == 2917) {
            $current_view = views_get_view($player1);
            $current_view->display['player1_tiles']->display_options['enabled'] = TRUE;
            views_save_view($current_view);
            $p2_view = views_get_view($player2);
            $p2_view->display['player2_tiles']->display_options['enabled'] = FALSE;
            views_save_view($p2_view);
            $_SESSION['game_in_play'] = true;
            $_SESSION['first_tile_played'] = false;
        } else if ($_SESSION['current_player']->nid == 2918){
            $current_view = views_get_view($player1);
            $current_view->display['player1_tiles']->display_options['enabled'] = FALSE;
            views_save_view($current_view);
            $p2_view = views_get_view($player2);
            $p2_view->display['player2_tiles']->display_options['enabled'] = TRUE;
            views_save_view($p2_view);
            $_SESSION['game_in_play'] = true;
            $_SESSION['first_tile_played'] = false;
        } else {
            $current_view = views_get_view($player1);
            $current_view->display['player1_tiles']->display_options['enabled'] = FALSE;
            views_save_view($current_view);
            $p2_view = views_get_view($player2);
            $p2_view->display['player2_tiles']->display_options['enabled'] = FALSE;
            views_save_view($p2_view);
        }

        drupal_goto('turn_options');
    }

    //Assigns session variables depending on whether player has clicked on play tiles or board tiles and redirects to actions
    function gamestart_node_view($node) {
        if($_SESSION['game_in_play'] && $node->type == 'board_tile'){
            $_SESSION['tile_to_play'] = $node;
            print($node->title);
        } else if($_SESSION['game_in_play'] && $node->type == 'board') {
            $_SESSION['location_to_play'] = $node;
            print($node->title);
        }
        if ($_SESSION['game_in_play'] && $_SESSION['tile_to_play'] && $_SESSION['location_to_play'] && $node->type == 'board'  && $_SESSION['claim_word_active'] == false){
                    $_SESSION['tile_to_play_title'] = $_SESSION['tile_to_play']->title;
                    $_SESSION['location_to_play_title'] = $_SESSION['location_to_play']->title;
                    drupal_goto('confirm_play');
        } elseif ($_SESSION['game_in_play'] && $_SESSION['tile_to_play'] && $_SESSION['location_to_play'] && $node->type == 'board'  && $_SESSION['claim_word_active'] == true){
          drupal_goto('select_claimed_word');
        }
    }

    function invalid_play_function() {
      return "This tile is taken, please select another!";
    }
