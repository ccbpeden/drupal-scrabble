<?php
    function gamestart_menu() {
        $items['start_game'] = array(
            'title' => 'Scrabble Game Start',
            'page callback' => 'initialize',
            'access callback' => TRUE,
            'type' => MENU_NORMAL_ITEM,
        );
        return $items;
    }

    function initialize() {
        $query_board = db_select('node', 'n')
            ->Fields('N', array('nid', 'title'))
            ->condition('type', 'board');
        $result = $query_board->execute();
        foreach($result as $record) {
            $node = node_load($record->nid);
            $node->field_played_letter[$node->language][0]['value'] = '';
            $node->field_current_image = $node->field_default_image;
            $node->revision = 1;
            $node->log = 'This node was programmatically updated on ' . date('c');
            node_save($node);
        }

        $query_play_tiles = db_select('node', 'n')
            ->Fields('N', array('nid', 'title'))
            ->condition('type', 'board_tile');
        $result = $query_play_tiles->execute();
        foreach($result as $play_tile) {
            $node = node_load($play_tile->nid);
            $node->field_belongs_to[$node->language][0]['value'] = '';
            $node->field_x_coordinate[$node->language][0]['value'] = '';
            $node->field_y_coordinate[$node->language][0]['value'] = '';
        }

        $query_words = db_select('node', 'n')
        ->Fields('N', array('nid', 'title'))
        ->condition('type', 'played_words');
        $result = $query_words->execute();
        foreach($result as $word) {
            $node = node_load($word->nid);
            node_delete($node->nid);
        }

        $query_players = db_select('node', 'n')
        ->Fields('N', array('nid', 'title'))
        ->condition('type', 'player');
        $result = $query_players->execute();
        foreach($result as $player) {
            $node = node_load($player->nid);
            $node->field_score[$node->language][0]['value'] = 0;
            $node->field_tile1[$node->language][0]['value'] = '';
            $node->field_tile2[$node->language][0]['value'] = '';
            $node->field_tile3[$node->language][0]['value'] = '';
            $node->field_tile4[$node->language][0]['value'] = '';
            $node->field_tile5[$node->language][0]['value'] = '';
            $node->field_tile6[$node->language][0]['value'] = '';
            $node->field_tile7[$node->language][0]['value'] = '';
            $node->revision = 1;
            $node->log = 'This node was programmatically updated on ' . date('c');
            node_save($node);
        }

        $query_beginning_player_tiles = db_select('node', 'n')
        ->Fields('N', array('nid'))
        ->condition('type', 'board_tile');
        $inplaytiles = [];
        $inplaynumbers = get_randoms(14);
        $all_letters = [];
        $result = $query_beginning_player_tiles->execute();
        $player1_tiles = [];
        $player2_tiles = [];

        foreach($result as $entry) {
            $node = node_load($entry->nid);
            $tile_possessor = $node->field_belongs_to[$node->language][0]['value'];
            array_push($all_letters, $node);
        }

        for($q = 0; $q < count($inplaynumbers); $q++){
            $current_random = $inplaynumbers[$q];
            array_push($inplaytiles, $all_letters[$current_random]);
        }

        for($s = 0; $s < count($inplaytiles); $s++){
            if ($s%2 === 0){
                array_push($player1_tiles, $inplaytiles[$s]);
            } else {
                array_push($player2_tiles, $inplaytiles[$s]);
            }
        }

        for($i = 0; $i < count($player1_tiles); $i++){
            $nid = $player1_tiles[$i]->nid;
            $node = node_load($nid);
            $node->field_belongs_to['und'][0]['value'] = 'Player 1';
            $node->field_y_coordinate['und'][0]['value'] = null;
            node_save($node);

        }
        $player1_nid = 2917;
        $player_node = node_load($player1_nid);
        $player_node->field_tile1[$node->language][0]['value'] = $player1_tiles[0]->title;
        $player_node->field_tile2[$node->language][0]['value'] = $player1_tiles[1]->title;
        $player_node->field_tile3[$node->language][0]['value'] = $player1_tiles[2]->title;
        $player_node->field_tile4[$node->language][0]['value'] = $player1_tiles[3]->title;
        $player_node->field_tile5[$node->language][0]['value'] = $player1_tiles[4]->title;
        $player_node->field_tile6[$node->language][0]['value'] = $player1_tiles[5]->title;
        $player_node->field_tile7[$node->language][0]['value'] = $player1_tiles[6]->title;
        node_save($player_node);


        for($j = 0; $j < count($player2_tiles); $j++){
            $nid = $player2_tiles[$j]->nid;
            $node = node_load($nid);
            $node->field_belongs_to['und'][0]['value'] = 'Player 2';
            $node->field_y_coordinate['und'][0]['value'] = null;
            node_save($node);
        }

        $player2_nid = 2918;
        $player_node = node_load($player2_nid);
        $player_node->field_tile1[$node->language][0]['value'] = $player2_tiles[0]->title;
        $player_node->field_tile2[$node->language][0]['value'] = $player2_tiles[1]->title;
        $player_node->field_tile3[$node->language][0]['value'] = $player2_tiles[2]->title;
        $player_node->field_tile4[$node->language][0]['value'] = $player2_tiles[3]->title;
        $player_node->field_tile5[$node->language][0]['value'] = $player2_tiles[4]->title;
        $player_node->field_tile6[$node->language][0]['value'] = $player2_tiles[5]->title;
        $player_node->field_tile7[$node->language][0]['value'] = $player2_tiles[6]->title;
        node_save($player_node);

        return "something may have happened.";
    }

    function get_randoms($amount) {
        $inplaynumbers = [];
        for($i = 1; $i <=99; $i++){
            if (count($inplaynumbers) < $amount) {
                $random = rand(0 , 99);
                if (!in_array($random, $inplaynumbers)) {
                    array_push($inplaynumbers, $random);
                }
            } else {
                return $inplaynumbers;
            }
        }
    }
